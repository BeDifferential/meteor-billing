{"version":3,"file":"/packages/billing.js","sources":["billing/collections/users.coffee","billing/server/billing.coffee","billing/server/methods.coffee"],"names":[],"mappings":"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","sourcesContent":["class BillingUser extends Minimongoid\n  @_collection: Meteor.users","@Billing =\n  settings: {}\n  config: (opts) ->\n    defaults =\n      secretKey: ''\n    @settings = _.extend defaults, opts","Meteor.methods\n\n  #\n  # Creates stripe customer then updates the user document with the stripe customerId and cardId\n  #\n  createCustomer: (userId, card) ->\n    console.log 'Creating customer for', userId\n    user = BillingUser.first(_id: userId)\n    unless user then throw new Meteor.Error 404, \"User not found.  Customer cannot be created.\"\n\n    Stripe = StripeAPI(Billing.settings.secretKey)\n    create = Async.wrap Stripe.customers, 'create'\n    try\n      customer = create email: user.emails[0].address, card: card.id\n      Meteor.users.update _id: user._id,\n        $set: 'profile.customerId': customer.id, 'profile.cardId': customer.default_card\n    catch e\n      console.error e\n      throw new Meteor.Error 500, e.message\n\n  #\n  # Update stripe subscription for user with provided plan and quantitiy\n  #\n  updateSubscription: (userId, params) ->\n    console.log 'Updating subscription for', userId\n    user = BillingUser.first(_id: userId)\n    if user then customerId = user.profile.customerId\n    unless user and customerId then new Meteor.Error 404, \"User not found.  Subscription cannot be updated.\"\n    if user.profile.waiveFees or user.profile.admin then return\n\n    Stripe = StripeAPI(Billing.settings.secretKey)\n    updateSubscription = Async.wrap Stripe.customers, 'updateSubscription'\n    try\n      subscription = updateSubscription customerId, params\n      Meteor.users.update _id: userId,\n        $set: 'profile.subscriptionId': subscription.id\n    catch e\n      console.error e\n      throw new Meteor.Error 500, e.message\n\n  #\n  # Manually cancels the stripe subscription for the provided customerId\n  #\n  cancelSubscription: (customerId) ->\n    console.log 'Canceling subscription for', customerId\n    user = BillingUser.first('profile.customerId': customerId)\n    unless user then new Meteor.Error 404, \"User not found.  Subscription cannot be canceled.\"\n\n    Stripe = StripeAPI(Billing.settings.secretKey)\n    cancelSubscription = Async.wrap Stripe.customers, 'cancelSubscription'\n    try\n      cancelSubscription customerId\n    catch e\n      console.error e\n      throw new Meteor.Error 500, e.message\n\n\n  #\n  # A subscription was deleted from Stripe, remove subscriptionId and card from user.\n  #\n  subscriptionDeleted: (customerId) ->\n    console.log 'Subscription deleted for', customerId\n    user = BillingUser.first('profile.customerId': customerId)\n    unless user then new Meteor.Error 404, \"User not found.  Subscription cannot be deleted.\"\n    \n    user.update('profile.subscriptionId': null)\n\n    Stripe = StripeAPI(Billing.settings.secretKey)\n    deleteCard = Async.wrap Stripe.customers, 'deleteCard'\n    try\n      deleteCard user.profile.customerId, user.profile.cardId\n      user.update('profile.cardId': null)\n    catch e\n      console.error e\n      throw new Meteor.Error 500, e.message\n\n\n  #\n  # Restart a subscription that was previously canceled\n  #\n  restartSubscription: (userId, card) ->\n    console.log 'Restarting subscription for', userId\n    user = BillingUser.first(_id: userId)\n    if user then customerId = user.profile.customerId\n    unless user and customerId then new Meteor.Error 404, \"User not found.  Subscription cannot be restarted.\"\n\n    Stripe = StripeAPI(Billing.settings.secretKey)\n    createCard = Async.wrap Stripe.customers 'createCard'\n    try\n      newCard = createCard customerId, card: card.id\n      user.update('profile.cardId': newCard.id)\n    catch e\n      console.error e\n      throw new Meteor.Error 500, e.message\n\n  #\n  # Get past invoices\n  #\n  getInvoices: ->\n    console.log 'Getting past invoices for', Meteor.userId()\n    Stripe = StripeAPI(Billing.settings.secretKey)\n    customerId = Meteor.user().profile.customerId\n    try\n      invoices = Async.wrap(Stripe.invoices, 'list')(customer: customerId)\n    catch e\n      console.error e\n      throw new Meteor.Error 500, e.message\n    invoices\n    \n\n  #\n  # Get next invoice\n  #\n  getUpcomingInvoice: ->    \n    console.log 'Getting upcoming invoice for', Meteor.userId()    \n    Stripe = StripeAPI(Billing.settings.secretKey)\n    customerId = Meteor.user().profile.customerId\n    try\n      invoice = Async.wrap(Stripe.invoices, 'retrieveUpcoming')(customerId)\n    catch e\n      console.error e\n      throw new Meteor.Error 500, e.message\n    invoice"]}